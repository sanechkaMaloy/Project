@page "/login"
@using BlazorApp1.Data
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography;
@using System.Text;
@inject ApplicationDbContext appDbContext
@inject NavigationManager navigationManager

<style>
    html, body {
        height: 100%;
        margin: 0;
        justify-content: center;
        align-items: center;
        background-color: #f0f8ff;
    }

    .page{
        width: 100%;
        height: 100%;
    }

    .content {
        width: 100%;
        height: 80%;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }

    .login-form {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        text-align: center;
    }
</style>

<div class="login-container">
    <div class="login-form">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/favicon.png" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label class="mb-1" >Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label mb-1>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger">@errorMessage</div>
            }
            <div class="mb-3">
                <label>Don't have an account?</label>
                <a href="/register">Create one!</a>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {

    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = appDbContext.Users.FirstOrDefault(x => x.Username == Model.Username);

        if (userAccount == null || userAccount.PasswordHash != HashPassword(Model.Password))
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Username),
            new Claim(ClaimTypes.NameIdentifier, userAccount.Id.ToString())

        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);

        navigationManager.NavigateTo("/");
    }

    private string HashPassword(string password)
    {
        using (var sha256 = SHA256.Create())
        {
            var bytes = Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}
