@page "/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@using System.Globalization
@attribute [Authorize]
@rendermode InteractiveServer
@inject TripService TripService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JS
<style>
    html, body {
        height: 100%;
        margin: 0;
        justify-content: center;
        align-items: center;
        background-color: #f0f8ff;
    }

    .list-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        font-size: 20px;
    }

    .list-form {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 800px;
        text-align: center;
    }

    .forma{
        position: relative;
    }

    .delete-button {
    position: absolute;
    right: 10px;
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: red;
    display: flex;
    align-items: center;
    justify-content: center;
    }
</style>
<div class="list-container">
    <div class="list-form">

        <div class="mb-3 text-center flex-column" style="font-size: 40px;">History of your travels</div>
        @if(trips == null)
        {
            <h1>Nothing added yet</h1>
        }
        else
        {
            @foreach (var trip in trips)
            {
                <div class=" forma mb-3 text-center flex-column" style="width: 80%; margin: 10px auto; border: 2px solid grey; padding: 10px;">
                    <button class="delete-button" @onclick="() => Deleting(trip.Id)">
                        <i class="bi bi-trash3"></i>
                    </button>
                    <p>Country: @GetCountryName(trip.Country) <img src="https://flagsapi.com/@(trip.Country)/shiny/64.png"></p>
                    <p>City: @trip.City</p>
                    <p>Date: @trip.StartDate.ToString("d") - @trip.EndDate.ToString("d")</p>

                    @if (trip.Image != null && trip.Image.Length > 0)
                    {
                        <img src="@($"api/trips/trip-image/{trip.Id}")" alt="Trip Photo" style="max-width: 300px; height: auto;" />
                    }

                    @if (!string.IsNullOrEmpty(trip.Notes))
                    {
                        <p>Notes: @trip.Notes</p>
                    }
                </div>
            }
        }

    </div>
</div>

@code {
    private List<Trip>? trips;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (int.TryParse(userId, out int parsedUserId))
        {
            trips = await TripService.GetAllTripsAsync(parsedUserId);
            await LoadTripImages();
        }
    }

    private string GetCountryName(string countryCode)
    {
        try
        {
            var region = new RegionInfo(countryCode);
            return region.EnglishName;
        }
        catch
        {
            return countryCode;
        }
    }

    private async Task LoadTripImages()
    {
        foreach (var trip in trips)
        {
            var response = await Http.GetAsync($"api/trips/trip-image/{trip.Id}");
            if (response.IsSuccessStatusCode)
            {
                trip.Image = await response.Content.ReadAsByteArrayAsync();
            }
        }
        StateHasChanged();
    }

    private async Task Deleting(int tripId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this trip?");
        if (!confirmed)
            return;

        var response = await Http.DeleteAsync($"api/trips/{tripId}");

        if (response.IsSuccessStatusCode)
        {
            trips.RemoveAll(t => t.Id == tripId);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to delete trip: {response.ReasonPhrase}");
        }
    }
}
